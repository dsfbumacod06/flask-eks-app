name: 'Terraform Infrastrucure Deployment'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
jobs:
  deploy-infra:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION_VALUE }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Deploy Terraform Infra
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        make deploy-infra
        CLUSTER_NAME=$(cat deployment-results.txt | grep 'cluster_name' | sed 's/cluster_name = "//' | sed 's/"//')
        echo "EKS_CLUSTER_NAME=$CLUSTER_NAME"
        echo "EKS_CLUSTER_NAME=$CLUSTER_NAME" > workflow-artifact.txt

        DB_ENDPOINT="$(cat deployment-results.txt | grep 'rds_postsgres_db_endpoint' | sed 's/rds_postsgres_db_endpoint = "//' | sed 's/:5432"//')"
        echo "RDS_ENDPOINT=$DB_ENDPOINT"
        echo "RDS_ENDPOINT=$DB_ENDPOINT" >> workflow-artifact.txt
    - name: Upload infra artifact
      uses: actions/upload-artifact@v3
      with:
        name: workflow-artifact
        path: workflow-artifact.txt

  # deploy-image:
  #   name: Deploy Image To ECR
  #   runs-on: ubuntu-latest
  #   needs: deploy-infra
  #   environment: dev
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #   - name: Download artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: workflow-artifact
  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_REGION_VALUE }}
  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1
  #   - name: Build, and tag image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       IMAGE_TAG: ${{ github.sha }}
  #       ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
  #     run: 
  #       make build-image
  #   - name: Push image to Amazon ECR
  #     id: push-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       IMAGE_TAG: ${{ github.sha }}
  #       ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
  #     run: | 
  #       make push-image
  #       IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
  #       echo "IMAGE_NAME=$IMAGE_NAME"
  #       echo "IMAGE_NAME=$IMAGE_NAME" >> workflow-artifact.txt
  #   - name: Upload image artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: workflow-artifact
  #       path: workflow-artifact.txt

  deploy-container:
    name: Deploy container to EKS
    runs-on: ubuntu-latest
    # needs: deploy-image
    needs: deploy-infra
    environment: dev
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: workflow-artifact
    - name: Extract artifact
      run: |
        echo "all contents"
        echo "$(cat workflow-artifact.txt)"
        echo "$(cat workflow-artifact.txt | grep 'EKS_CLUSTER_NAME')" >> $GITHUB_ENV
        echo "$(cat workflow-artifact.txt | grep 'RDS_ENDPOINT')" >> $GITHUB_ENV
        echo "$(cat workflow-artifact.txt | grep 'IMAGE_NAME')" >> $GITHUB_ENV

    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_REGION_VALUE }}
    # - name: Get kubectl
    #   run: |
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    #     echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
    #     sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    #     kubectl version --client
    # - name: Initialize kubeconfig
    #   run: 
    #     aws eks --region ${{ secrets.AWS_REGION_VALUE }} update-kubeconfig --name "$EKS_CLUSTER_NAME"
    - name: Create Manifests
      env:
        IMAGE_NAME: 
        RDS_ENDPOINT: 
      run: 
        # echo "$(cat ./deployment/manifests-templates/deployment.yaml |sed 's/IMAGE.NAME/$IMAGE_NAME/g')"

        sed "s/RDS.ENDPOINT/$RDS_ENDPOINT/g" ./deployment/manifests-templates/external-service.yaml

        sed "s/RDS.ENDPOINT/$RDS_ENDPOINT/g" ./deployment/manifests-templates/external-service.yaml > ./deployment/manifests/external-service.yaml


        # sed "s/IMAGE.NAME/$IMAGE_NAME/g" ./deployment/manifests-templates/deployment.yaml > ./deployment/manifests/deployment.yaml

        # sed "s/IMAGE.NAME/$IMAGE_NAME/g" ./deployment/manifests-templates/deployment.yaml > ./deployment/manifests/deployment.yaml
        # cat ./deployment/manifests/deployment.yaml
        # sed "s/RDS.ENDPOINT/$RDS_ENDPOINT/g" ./deployment/manifests-templates/external-service.yaml > ./deployment/manifests/external-service.yaml
        # cat ./deployment/manifests/external-service.yaml
    # - name: deploy-container
    #   run: 
    #     make deploy-container




